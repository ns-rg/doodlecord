.ts
import {Server as NetServer} from "http"
import { NextApiRequest } from "next"
import {Server as ServerIO} from "socket.io"
import { NextApiResponseServerIo } from "@/types"

export const config = {
    api:{
        bodyParser:false,
    },
};

const ioHandler = (req:NextApiRequest,res: NextApiResponseServerIo) => {
    try {
        if (!res.socket || !res.socket.server) {
            console.error("Socket or server not available");
            return res.status(500).end();
        }
        
        if(!res.socket.server.io){
            const path = "/api/socket/io"
            const httpServer : NetServer = res.socket.server as any
            const io = new ServerIO(httpServer,{
                path:path,
                addTrailingSlash:false,
                cors: {
                    origin: "*",
                    methods: ["GET", "POST"]
                }
            })
            res.socket.server.io = io;
        }
        res.end()
    } catch (error) {
        console.error("Socket.IO initialization error:", error);
        res.status(500).end();
    }
}

export default ioHandler